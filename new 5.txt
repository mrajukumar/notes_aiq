import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;

 

import com.google.gson.Gson;

 

public class First {

 

    public static void main(String[] args) {
        int portNumber = 8082; // Specify the port number you want to listen on
        String str;
        try {
            ServerSocket serverSocket = new ServerSocket(portNumber);
            System.out.println("Server listening on port " + portNumber);

 

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Client connected: " + clientSocket.getInetAddress());

 

                // Read the incoming request
                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                String line;
                StringBuilder requestBuilder = new StringBuilder();
                int contentLength = 0;

 

                // Read request line and headers until an empty line is encountered
                while ((line = in.readLine()) != null && !line.isEmpty()) {
                    requestBuilder.append(line).append(System.lineSeparator());
                    System.out.println(line);

 

                    if (line.startsWith("Content-Length:")) {
                        contentLength = Integer.parseInt(line.substring(16).trim());
                    }
                }

 

                String requestData = requestBuilder.toString();
                System.out.println("Received request data:\n" + requestData);

 

                // Check if the request is a POST request
                if (requestData.startsWith("POST")) {
                    // Read the request entity based on the content length
                    char[] entityBuffer = new char[contentLength];
                    in.read(entityBuffer, 0, contentLength);
                    String requestEntity = new String(entityBuffer);
                    System.out.println("Received request entity: " + requestEntity);

                     str=postData(requestEntity);
                    System.out.println("RESPONSE RECEIVED FROM URL "+str);


                    String contentTypeHeader = "Content-Type: application/json";

                    PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                    out.println("HTTP/1.1 200 OK");
                    out.println(contentTypeHeader);     
                    out.println();
                    out.println(str);


                    out.close();
                    in.close();
                    clientSocket.close();
                } else {
                    // Ignore requests that are not POST
                    clientSocket.close();
                }
                }

        }catch (IOException e) {
            StringWriter errors = new StringWriter();
            e.printStackTrace(new PrintWriter(errors));
        }
    }


    public static String postData(String requestEntity) {
        try {
            URL url = new URL("http://localhost:8081");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);

 

            // Write the requestEntity to the connection's output stream
            try (OutputStream outputStream = connection.getOutputStream()) {
                byte[] requestData = requestEntity.getBytes("UTF-8");
                outputStream.write(requestData);
            }

 

            // Check the response code
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Read the response body
                StringBuilder responseBuilder = new StringBuilder();
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        responseBuilder.append(line);
                    }
                }

 

                // Return the response body
                return responseBuilder.toString();
            } else {
                // Request failed
                System.out.println("Failed to send request. Response Code: " + responseCode);
                return null;
            }
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    }






docker pull ngnix
nginix port 80